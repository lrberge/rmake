// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_hash_string
std::string cpp_hash_string(std::string x);
RcppExport SEXP _rmake_cpp_hash_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hash_string(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_extract_fun
std::vector<std::string> cpp_extract_fun(SEXP R_str, SEXP R_fun_str);
RcppExport SEXP _rmake_cpp_extract_fun(SEXP R_strSEXP, SEXP R_fun_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_str(R_strSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_fun_str(R_fun_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_extract_fun(R_str, R_fun_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_clean_comments
std::string cpp_clean_comments(SEXP R_str);
RcppExport SEXP _rmake_cpp_clean_comments(SEXP R_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_str(R_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_clean_comments(R_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_valid_code_index
Rcpp::List cpp_valid_code_index(SEXP R_str);
RcppExport SEXP _rmake_cpp_valid_code_index(SEXP R_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_str(R_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_valid_code_index(R_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_absolute_to_relative
SEXP cpp_absolute_to_relative(SEXP R_paths, SEXP R_root);
RcppExport SEXP _rmake_cpp_absolute_to_relative(SEXP R_pathsSEXP, SEXP R_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_paths(R_pathsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_root(R_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_absolute_to_relative(R_paths, R_root));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmake_cpp_hash_string", (DL_FUNC) &_rmake_cpp_hash_string, 1},
    {"_rmake_cpp_extract_fun", (DL_FUNC) &_rmake_cpp_extract_fun, 2},
    {"_rmake_cpp_clean_comments", (DL_FUNC) &_rmake_cpp_clean_comments, 1},
    {"_rmake_cpp_valid_code_index", (DL_FUNC) &_rmake_cpp_valid_code_index, 1},
    {"_rmake_cpp_absolute_to_relative", (DL_FUNC) &_rmake_cpp_absolute_to_relative, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmake(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
